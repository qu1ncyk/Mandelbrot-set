{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/generate.ts","../../src/point.ts","../../node_modules/svelte-material-icons/Brightness6.svelte","../../node_modules/svelte-tabs/src/id.js","../../node_modules/svelte/store/index.mjs","../../node_modules/svelte-tabs/src/Tabs.svelte","../../node_modules/svelte-tabs/src/Tab.svelte","../../node_modules/svelte-tabs/src/TabList.svelte","../../node_modules/svelte-tabs/src/TabPanel.svelte","../../src/Options.svelte","../../src/Spinner.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape_attribute_value(value.toString())}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.47.0' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    if (tag && typeof tag !== 'string') {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import type { Point } from \"./point\";\n\nexport class Thread {\n    private static wasm: ArrayBuffer;\n    private worker: Worker;\n    static all: Thread[] = [];\n\n    constructor() {\n        this.worker = new Worker(\"build/worker.js\");\n    }\n\n    async sendWasm() {\n        await this.command(\"loadWasm\", await Thread.getWasm());\n    }\n\n    command(action: string, data: any) {\n        return new Promise((resolve, reject) => {\n            this.worker.onmessage = event => resolve(event.data);\n            this.worker.postMessage({ action, data });\n        });\n    }\n\n    static async getWasm() {\n        if (typeof Thread.wasm === \"undefined\") {\n            const response = await fetch(\"build/generate.wasm\");\n            Thread.wasm = await response.arrayBuffer();\n        }\n        return Thread.wasm;\n    }\n\n    terminate() {\n        this.worker.terminate();\n    }\n\n    static async changeNumberOfThreads(numberOfThreads: number) {\n        while (Thread.all.length != numberOfThreads) {\n            if (Thread.all.length < numberOfThreads) {\n                const thread = new Thread();\n                await thread.sendWasm();\n                Thread.all.push(thread);\n            } else {\n                Thread.all.pop().terminate();\n            }\n        }\n    }\n}\n\nexport async function generate(\n    width: number,\n    height: number,\n    zoom: number,\n    offset: Point,\n    color: boolean,\n    numberOfIterations: number,\n    numberOfThreads: number,\n    clearThreads: boolean\n) {\n    await Thread.changeNumberOfThreads(numberOfThreads);\n    let promises = [];\n    for (let i = 0; i < Thread.all.length; i++) {\n        promises.push(Thread.all[i].command(\"generate\", [\n            width, height, zoom, offset.x, offset.y, color, numberOfIterations, numberOfThreads, i\n        ]));\n    }\n    const imageDataArrays: Uint8ClampedArray[] = await Promise.all(promises);\n    const imageDataArray = new Uint8ClampedArray(width * height * 4);\n\n    for (let i = 0; i < imageDataArrays.length; i++) {\n        imageDataArray.set(imageDataArrays[i], imageDataArrays[0].length * i);\n    }\n    if (clearThreads)\n        await Thread.changeNumberOfThreads(0);\n\n    return imageDataArray;\n}","export class Point {\n    x: number;\n    y: number;\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n    copy() {\n        return new Point(this.x, this.y);\n    }\n}","<script>\n  export let size = \"1em\";\n  export let width = size;\n  export let height = size;\n  export let color = \"currentColor\";\n  export let viewBox = \"0 0 24 24\";\n</script>\n\n<svg width=\"{width}\" height=\"{height}\" viewBox=\"{viewBox}\"><path d=\"M12,18V6A6,6 0 0,1 18,12A6,6 0 0,1 12,18M20,15.31L23.31,12L20,8.69V4H15.31L12,0.69L8.69,4H4V8.69L0.69,12L4,15.31V20H8.69L12,23.31L15.31,20H20V15.31Z\" fill=\"{color}\"/></svg>","let id = 1;\n\nexport default function getId() {\n  return `svelte-tabs-${id++}`;\n}\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","<script context=\"module\">\n  export const TABS = {};\n</script>\n\n<script>\n  import { afterUpdate, setContext, onDestroy, onMount, tick } from 'svelte';\n  import { writable } from 'svelte/store';\n\n  export let initialSelectedIndex = 0;\n\n  const tabElements = [];\n  const tabs = [];\n  const panels = [];\n\n  const controls = writable({});\n  const labeledBy = writable({});\n\n  const selectedTab = writable(null);\n  const selectedPanel = writable(null);\n\n  function removeAndUpdateSelected(arr, item, selectedStore) {\n    const index = arr.indexOf(item);\n    arr.splice(index, 1);\n    selectedStore.update(selected => selected === item ? (arr[index] || arr[arr.length - 1]) : selected);\n  }\n\n  function registerItem(arr, item, selectedStore) {\n    arr.push(item);\n    selectedStore.update(selected => selected || item);\n    onDestroy(() => removeAndUpdateSelected(arr, item, selectedStore));\n  }\n\n  function selectTab(tab) {\n    const index = tabs.indexOf(tab);\n    selectedTab.set(tab);\n    selectedPanel.set(panels[index]);\n  }\n\n  setContext(TABS, {\n    registerTab(tab) {\n      registerItem(tabs, tab, selectedTab);\n    },\n\n    registerTabElement(tabElement) {\n      tabElements.push(tabElement);\n    },\n\n    registerPanel(panel) {\n      registerItem(panels, panel, selectedPanel);\n    },\n\n    selectTab,\n\n    selectedTab,\n    selectedPanel,\n\n    controls,\n    labeledBy\n  });\n\n  onMount(() => {\n    selectTab(tabs[initialSelectedIndex]);\n  });\n\n  afterUpdate(() => {\n    for (let i = 0; i < tabs.length; i++) {\n      controls.update(controlsData => ({...controlsData, [tabs[i].id]: panels[i].id}));\n      labeledBy.update(labeledByData => ({...labeledByData, [panels[i].id]: tabs[i].id}));\n    }\n  });\n\n  async function handleKeyDown(event) {\n    if (event.target.classList.contains('svelte-tabs__tab')) {\n      let selectedIndex = tabs.indexOf($selectedTab);\n\n      switch (event.key) {\n        case 'ArrowRight':\n          selectedIndex += 1;\n          if (selectedIndex > tabs.length - 1) {\n            selectedIndex = 0;\n          }\n          selectTab(tabs[selectedIndex]);\n          tabElements[selectedIndex].focus();\n          break;\n\n        case 'ArrowLeft':\n          selectedIndex -= 1;\n          if (selectedIndex < 0) {\n            selectedIndex = tabs.length - 1;\n          }\n          selectTab(tabs[selectedIndex]);\n          tabElements[selectedIndex].focus();\n      }\n    }\n  }\n</script>\n\n<div class=\"svelte-tabs\" on:keydown={handleKeyDown}>\n  <slot></slot>\n</div>\n","<script>\n  import { getContext, onMount, tick } from 'svelte';\n\n  import getId from './id';\n  import { TABS } from './Tabs.svelte';\n\n  let tabEl;\n\n  const tab = {\n    id: getId()\n  };\n  const { registerTab, registerTabElement, selectTab, selectedTab, controls } = getContext(TABS);\n\n  let isSelected;\n  $: isSelected = $selectedTab === tab;\n\n  registerTab(tab);\n\n  onMount(async () => {\n    await tick();\n    registerTabElement(tabEl);\n  });\n</script>\n\n<style>\n\t.svelte-tabs__tab {\n\t\tborder: none;\n\t\tborder-bottom: 2px solid transparent;\n\t\tcolor: #000000;\n    cursor: pointer;\n    list-style: none;\n    display: inline-block;\n    padding: 0.5em 0.75em;\n\t}\n\t\n  .svelte-tabs__tab:focus {\n    outline: thin dotted;\n  }\n\n\t.svelte-tabs__selected {\n\t\tborder-bottom: 2px solid #4F81E5;\n    color: #4F81E5;\n\t}\n</style>\n\n<li\n  bind:this={tabEl}\n  role=\"tab\"\n  id={tab.id}\n  aria-controls={$controls[tab.id]}\n  aria-selected={isSelected}\n  tabindex=\"{isSelected ? 0 : -1}\"\n  class:svelte-tabs__selected={isSelected}\n  class=\"svelte-tabs__tab\"\n  on:click={() => selectTab(tab)}>\n\t<slot></slot>\n</li>\n","<style>\n\t.svelte-tabs__tab-list {\n    border-bottom: 1px solid #CCCCCC;\n    margin: 0;\n    padding: 0;\n\t}\n</style>\n\n<ul role=\"tablist\" class=\"svelte-tabs__tab-list\">\n  <slot></slot>\n</ul>\n","<script>\n  import { getContext } from 'svelte';\n\n  import getId from './id';\n  import { TABS } from './Tabs.svelte';\n\n  const panel = {\n    id: getId()\n  };\n  const { registerPanel, selectedPanel, labeledBy } = getContext(TABS);\n\n  registerPanel(panel);\n</script>\n\n<style>\n  .svelte-tabs__tab-panel {\n    margin-top: 0.5em;\n  }\n</style>\n\n<div \n  id={panel.id}\n  aria-labelledby={$labeledBy[panel.id]}\n  class=\"svelte-tabs__tab-panel\"\n  role=\"tabpanel\">\n  {#if $selectedPanel === panel}\n    <slot></slot>\n  {/if}\n</div>\n","<script lang=\"ts\">\n    import { Tabs, Tab, TabList, TabPanel } from \"svelte-tabs\";\n    import type { Point } from \"./point\";\n    import { createEventDispatcher } from \"svelte\";\n\n    let dispatch = createEventDispatcher();\n    function update(event: Event) {\n        event.preventDefault();\n        dispatch(\"update\");\n    }\n\n    export let width: number,\n        height: number,\n        offset: Point,\n        zoom: number,\n        color: boolean,\n        numberOfIterations: number,\n        numberOfThreads: number;\n    let colorString = \"true\";\n    $: color = colorString === \"true\";\n    // svelte won't let me have booleans as attributes\n</script>\n\n<style>\n    :global(.svelte-tabs li.svelte-tabs__tab) {\n        color: #ccc;\n    }\n    :global(body.light .svelte-tabs li.svelte-tabs__tab) {\n        color: #333;\n    }\n    :global(.svelte-tabs) {\n        border-bottom: 1px solid #ccc;\n    }\n\n    h2 {\n        font-size: 1.3em;\n        margin-bottom: 0.3em;\n    }\n    form {\n        text-align: center;\n    }\n    input[type=\"number\"] {\n        width: 5em;\n    }\n    .container div:first-of-type h2 {\n        margin-top: 0;\n    }\n    input[type=\"submit\"] {\n        margin-top: 1em;\n    }\n    .color-container label {\n        text-align: left;\n    }\n\n    /* Remove arrow button from number input */\n    input::-webkit-outer-spin-button,\n    input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n    }\n    input[type=\"number\"] {\n        -moz-appearance: textfield;\n    }\n\n    @media (min-width: 640px) {\n        h2 {\n            font-size: 1.7em;\n        }\n    }\n</style>\n\n<form on:submit={update}>\n    <Tabs>\n        <TabList>\n            <Tab>Camera</Tab>\n            <Tab>Canvas</Tab>\n            <Tab>Calculation</Tab>\n        </TabList>\n\n        <TabPanel>\n            <div>\n                <h2>Center position</h2>\n                (<input type=\"number\" step=\"any\" bind:value={offset.x} />,\n                <input type=\"number\" step=\"any\" bind:value={offset.y} />)\n            </div>\n            <div>\n                <h2>Zoom</h2>\n                <input type=\"number\" step=\"0.1\" bind:value={zoom} />%\n            </div>\n        </TabPanel>\n\n        <TabPanel>\n            <div>\n                <h2>Canvas size</h2>\n                <input type=\"number\" bind:value={width} />\n                &times;\n                <input type=\"number\" bind:value={height} />\n            </div>\n            <div class=\"color-container\">\n                <h2>Color</h2>\n                <label><input\n                        type=\"radio\"\n                        bind:group={colorString}\n                        value=\"true\" />\n                    Color</label>\n                <label><input\n                        type=\"radio\"\n                        bind:group={colorString}\n                        value=\"false\" />\n                    Black & white</label>\n            </div>\n        </TabPanel>\n\n        <TabPanel>\n            <div>\n                <h2>Number of iterations</h2>\n                <input type=\"number\" bind:value={numberOfIterations} />\n            </div>\n            <div>\n                <h2>Number of threads</h2>\n                <input type=\"number\" bind:value={numberOfThreads} />\n            </div>\n        </TabPanel>\n    </Tabs>\n    <input type=\"submit\" value=\"Update\" />\n</form>\n","<script lang=\"ts\">\n    export let lightMode = false;\n</script>\n<style>\n    @keyframes rotate {\n        from {\n            transform: rotate(0deg);\n        }\n        to {\n            transform: rotate(360deg);\n        }\n    }\n    div{\n        width: 2em;\n        height: 2em;\n        border-radius: 50%;\n        border: 7px solid var(--color);\n        border-top: 7px solid transparent;\n        animation: rotate infinite 2s linear;\n    }\n</style>\n<div style={`--color: ${lightMode ? \"#333\" : \"#ccc\"}`} />","<script lang=\"ts\">\n\timport { onMount } from \"svelte\";\n\timport { generate } from \"./generate\";\n\timport { Point } from \"./point\";\n\timport Brightness6 from \"svelte-material-icons/Brightness6.svelte\";\n\timport Options from \"./Options.svelte\";\n\timport Spinner from \"./Spinner.svelte\";\n\n\tlet width = 300,\n\t\theight = 300,\n\t\toffset = new Point(0, 0),\n\t\tzoom = 50,\n\t\tzoomFactor: number,\n\t\tcolor: boolean,\n\t\tnumberOfIterations = 100,\n\t\tnumberOfThreads = navigator.hardwareConcurrency || 1;\n\t$: zoomFactor = zoom / 100;\n\tlet canvas: HTMLCanvasElement;\n\tlet ctx: CanvasRenderingContext2D;\n\tlet calculating = false;\n\n\texport let version: string,\n\t\ttest: boolean;\n\n\tlet sliderValue = 0;\n\tlet oldZoom: number;\n\tfunction sliderBegin() {\n\t\toldZoom = zoom;\n\t\timage.src = canvas.toDataURL();\n\t}\n\tfunction sliderMove() {\n\t\tconst zoomDifference = Math.pow(2, sliderValue);\n\t\tzoom = Number((zoomDifference * oldZoom).toFixed(1));\n\t\tctx.clearRect(0, 0, width, height);\n\t\tctx.drawImage(\n\t\t\timage,\n\t\t\t(width - width * zoomDifference) / 2,\n\t\t\t(height - height * zoomDifference) / 2,\n\t\t\twidth * zoomDifference,\n\t\t\theight * zoomDifference\n\t\t);\n\t}\n\tasync function sliderEnd() {\n\t\tsliderValue = 0;\n\t\tawait drawMandelbrot();\n\t}\n\n\tfunction toggleLightMode() {\n\t\tlocalStorage.lightMode = !document.body.classList.contains(\"light\");\n\t\tif (localStorage.lightMode) document.body.classList.toggle(\"light\");\n\t}\n\n\tlet mousedown = false;\n\tlet mouseStartingPos: Point;\n\tlet image = new Image();\n\tlet oldOffset: Point;\n\tfunction canvasDragBegin(eventOffset: Point) {\n\t\tmousedown = true;\n\t\tmouseStartingPos = eventOffset;\n\t\timage.src = canvas.toDataURL();\n\t\toldOffset = offset.copy();\n\t}\n\tfunction canvasDragMove(eventOffset: Point) {\n\t\tif (mousedown) {\n\t\t\tconst dragOffset = new Point(\n\t\t\t\teventOffset.x - mouseStartingPos.x,\n\t\t\t\teventOffset.y - mouseStartingPos.y\n\t\t\t);\n\t\t\tctx.clearRect(0, 0, width, height);\n\t\t\tctx.drawImage(image, dragOffset.x, dragOffset.y);\n\n\t\t\toffset.x = oldOffset.x - dragOffset.x / width / zoomFactor;\n\t\t\toffset.y = oldOffset.y + dragOffset.y / height / zoomFactor;\n\t\t}\n\t}\n\tasync function canvasDragEnd(eventOffset?: Point) {\n\t\tif (eventOffset) canvasDragMove(eventOffset);\n\t\tmousedown = false;\n\t\tawait drawMandelbrot();\n\t}\n\n\tfunction canvasSwipeBegin(event: TouchEvent) {\n\t\tevent.preventDefault();\n\t\tcanvasDragBegin(\n\t\t\tnew Point(event.touches[0].clientX, event.touches[0].clientY)\n\t\t);\n\t}\n\tfunction canvasSwipeMove(event: TouchEvent) {\n\t\tevent.preventDefault();\n\t\tcanvasDragMove(\n\t\t\tnew Point(event.touches[0].clientX, event.touches[0].clientY)\n\t\t);\n\t}\n\tasync function canvasSwipeEnd(event: TouchEvent) {\n\t\tevent.preventDefault();\n\t\tawait canvasDragEnd();\n\t}\n\n\tasync function drawMandelbrot() {\n\t\tcalculating = true;\n\t\tconst imageDataArray = await generate(\n\t\t\twidth,\n\t\t\theight,\n\t\t\tzoomFactor,\n\t\t\toffset,\n\t\t\tcolor,\n\t\t\tnumberOfIterations,\n\t\t\tnumberOfThreads,\n\t\t\ttest\n\t\t);\n\t\tconst imageData = new ImageData(imageDataArray, width);\n\t\tctx.putImageData(imageData, 0, 0);\n\t\tcalculating = false;\n\t}\n\n\tonMount(async () => {\n\t\tif (localStorage.lightMode === \"true\")\n\t\t\tdocument.body.classList.add(\"light\");\n\n\t\tsetTimeout(() => document.body.classList.add(\"loaded\"), 500);\n\n\t\tctx = canvas.getContext(\"2d\");\n\n\t\tawait drawMandelbrot();\n\t});\n</script>\n\n<style>\n\th1 {\n\t\tfont-size: 2em;\n\t\ttext-align: center;\n\t}\n\tcanvas {\n\t\tborder: 1px solid #ccc;\n\t\tmax-height: 80vh;\n\t\tmax-width: 80vw;\n\t\tcursor: grab;\n\t}\n\tcanvas:active,\n\tinput[type=\"range\"]:active {\n\t\tcursor: grabbing;\n\t}\n\t.main-container {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tjustify-content: space-evenly;\n\t\talign-items: center;\n\t}\n\t.container {\n\t\ttext-align: center;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\tinput[type=\"range\"] {\n\t\tpadding: 0;\n\t\tcursor: grab;\n\t}\n\t.version {\n\t\tposition: absolute;\n\t\ttop: 1em;\n\t\tleft: 1em;\n\t}\n\t.icon-container {\n\t\tposition: absolute;\n\t\tfont-size: 2em;\n\t\ttop: 0.5em;\n\t\tright: 0.5em;\n\t\tcursor: pointer;\n\t}\n\t.overlay {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tbackground-color: rgba(0, 0, 0, 0.3);\n\t\tcursor: wait;\n\t}\n\t.spinner-container {\n\t\tposition: fixed;\n\t\ttop: 50%;\n\t\tleft: 50%;\n\t\ttransform: translate(-50%, -50%);\n\t}\n\n\t@media (min-width: 640px) {\n\t\th1 {\n\t\t\tfont-size: 3em;\n\t\t}\n\t\t.main-container {\n\t\t\tflex-direction: row;\n\t\t}\n\t\tcanvas {\n\t\t\tmax-width: 60vw;\n\t\t}\n\t}\n</style>\n\n<h1>Mandelbrot set generator</h1>\n<span class=\"version\">{version}</span>\n<div class=\"icon-container\" on:click={toggleLightMode}>\n\t<Brightness6 />\n</div>\n<div class=\"main-container\">\n\t<div class=\"container\">\n\t\t<canvas\n\t\t\t{width}\n\t\t\t{height}\n\t\t\tbind:this={canvas}\n\t\t\ton:mousedown={(event) => canvasDragBegin(new Point(event.offsetX, event.offsetY))}\n\t\t\ton:mousemove={(event) => canvasDragMove(new Point(event.offsetX, event.offsetY))}\n\t\t\ton:mouseup={(event) => canvasDragEnd(new Point(event.offsetX, event.offsetY))}\n\t\t\ton:touchstart={canvasSwipeBegin}\n\t\t\ton:touchmove={canvasSwipeMove}\n\t\t\ton:touchend={canvasSwipeEnd} />\n\t\t<input\n\t\t\ttype=\"range\"\n\t\t\tmin=\"-1\"\n\t\t\tmax=\"1\"\n\t\t\tstep=\"0.01\"\n\t\t\tbind:value={sliderValue}\n\t\t\ton:mousedown={sliderBegin}\n\t\t\ton:touchstart={sliderBegin}\n\t\t\ton:input={sliderMove}\n\t\t\ton:change={sliderEnd} />\n\t</div>\n\t<Options\n\t\tbind:width\n\t\tbind:height\n\t\tbind:offset\n\t\tbind:zoom\n\t\tbind:color\n\t\tbind:numberOfThreads\n\t\tbind:numberOfIterations\n\t\ton:update={drawMandelbrot} />\n</div>\n{#if calculating}\n\t<div class=\"overlay\">\n\t\t<div class=\"spinner-container\">\n\t\t\t<Spinner lightMode={localStorage.lightMode === 'true'} />\n\t\t</div>\n\t</div>\n{/if}\n","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tversion: \"2c49097\",\n\t\ttest: false\n\t}\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","tar","src","k","assign","slice","get_slot_changes","dirty","lets","undefined","merged","len","Math","max","length","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","p","get_all_dirty_from_scope","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","to_number","set_input_value","input","toggle_class","toggle","classList","current_component","set_current_component","get_current_component","Error","onMount","on_mount","createEventDispatcher","type","detail","bubbles","e","createEvent","initCustomEvent","custom_event","call","getContext","key","context","get","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","schedule_update","then","flush","add_render_callback","add_flush_callback","seen_callbacks","Set","flushidx","saved_component","update","pop","has","add","clear","fragment","before_update","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","d","bind","index","props","bound","create_component","mount_component","customElement","m","new_on_destroy","map","filter","destroy_component","detaching","init","instance","create_fragment","not_equal","append_styles","parent_component","on_disconnect","Map","skip_bound","root","ready","ret","rest","fill","make_dirty","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","indexOf","splice","$$props","obj","$$set","keys","Thread","worker","Worker","command","getWasm","action","reject","onmessage","postMessage","wasm","response","fetch","arrayBuffer","terminate","numberOfThreads","all","thread","sendWasm","Point","x","y","svg","path","size","width","height","color","viewBox","id","getId","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","div","TABS","initialSelectedIndex","tabElements","tabs","panels","controls","labeledBy","selectedTab","selectedPanel","registerItem","arr","item","selectedStore","selected","removeAndUpdateSelected","selectTab","tab","tabElement","panel","controlsData","labeledByData","async","contains","selectedIndex","$selectedTab","focus","li","tabEl","registerTab","registerTabElement","isSelected","$$invalidate","$$value","ul","if_block","create_if_block","registerPanel","div0","h20","input0","input1","div1","h21","input2","label0","label1","input3","form","dispatch","offset","zoom","numberOfIterations","colorString","preventDefault","__value","lightMode","localStorage","h1","span","div2","canvas_1","toggleLightMode","passive","wholeText","body","zoomFactor","canvas","oldZoom","navigator","hardwareConcurrency","calculating","version","test","sliderValue","mouseStartingPos","oldOffset","mousedown","image","Image","canvasDragBegin","eventOffset","toDataURL","copy","canvasDragMove","dragOffset","clearRect","drawImage","canvasDragEnd","drawMandelbrot","imageDataArray","clearThreads","changeNumberOfThreads","promises","imageDataArrays","Uint8ClampedArray","generate","imageData","ImageData","putImageData","setTimeout","zoomDifference","pow","Number","toFixed","touches","clientX","clientY","offsetX","offsetY"],"mappings":"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"}