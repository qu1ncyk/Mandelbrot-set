{"version":3,"file":"worker.js","sources":["../../node_modules/@assemblyscript/loader/index.js","../../src/worker.ts"],"sourcesContent":["// Runtime header offsets\nconst ID_OFFSET = -8;\nconst SIZE_OFFSET = -4;\n\n// Runtime ids\nconst ARRAYBUFFER_ID = 0;\nconst STRING_ID = 1;\n// const ARRAYBUFFERVIEW_ID = 2;\n\n// Runtime type information\nconst ARRAYBUFFERVIEW = 1 << 0;\nconst ARRAY = 1 << 1;\nconst STATICARRAY = 1 << 2;\n// const SET = 1 << 3;\n// const MAP = 1 << 4;\nconst VAL_ALIGN_OFFSET = 6;\n// const VAL_ALIGN = 1 << VAL_ALIGN_OFFSET;\nconst VAL_SIGNED = 1 << 11;\nconst VAL_FLOAT = 1 << 12;\n// const VAL_NULLABLE = 1 << 13;\nconst VAL_MANAGED = 1 << 14;\n// const KEY_ALIGN_OFFSET = 15;\n// const KEY_ALIGN = 1 << KEY_ALIGN_OFFSET;\n// const KEY_SIGNED = 1 << 20;\n// const KEY_FLOAT = 1 << 21;\n// const KEY_NULLABLE = 1 << 22;\n// const KEY_MANAGED = 1 << 23;\n\n// Array(BufferView) layout\nconst ARRAYBUFFERVIEW_BUFFER_OFFSET = 0;\nconst ARRAYBUFFERVIEW_DATASTART_OFFSET = 4;\nconst ARRAYBUFFERVIEW_BYTELENGTH_OFFSET = 8;\nconst ARRAYBUFFERVIEW_SIZE = 12;\nconst ARRAY_LENGTH_OFFSET = 12;\nconst ARRAY_SIZE = 16;\n\nconst E_NO_EXPORT_TABLE   = \"Operation requires compiling with --exportTable\";\nconst E_NO_EXPORT_RUNTIME = \"Operation requires compiling with --exportRuntime\";\nconst F_NO_EXPORT_RUNTIME = () => { throw Error(E_NO_EXPORT_RUNTIME); };\n\nconst BIGINT = typeof BigUint64Array !== \"undefined\";\nconst THIS = Symbol();\n\nconst STRING_SMALLSIZE = 192; // break-even point in V8\nconst STRING_CHUNKSIZE = 1024; // mitigate stack overflow\nconst utf16 = new TextDecoder(\"utf-16le\", { fatal: true }); // != wtf16\n\n/** polyfill for Object.hasOwn */\nObject.hasOwn = Object.hasOwn || function(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n\n/** Gets a string from memory. */\nfunction getStringImpl(buffer, ptr) {\n  let len = new Uint32Array(buffer)[ptr + SIZE_OFFSET >>> 2] >>> 1;\n  const wtf16 = new Uint16Array(buffer, ptr, len);\n  if (len <= STRING_SMALLSIZE) return String.fromCharCode(...wtf16);\n  try {\n    return utf16.decode(wtf16);\n  } catch {\n    let str = \"\", off = 0;\n    while (len - off > STRING_CHUNKSIZE) {\n      str += String.fromCharCode(...wtf16.subarray(off, off += STRING_CHUNKSIZE));\n    }\n    return str + String.fromCharCode(...wtf16.subarray(off));\n  }\n}\n\n/** Prepares the base module prior to instantiation. */\nfunction preInstantiate(imports) {\n  const extendedExports = {};\n\n  function getString(memory, ptr) {\n    if (!memory) return \"<yet unknown>\";\n    return getStringImpl(memory.buffer, ptr);\n  }\n\n  // add common imports used by stdlib for convenience\n  const env = (imports.env = imports.env || {});\n  env.abort = env.abort || function abort(msg, file, line, colm) {\n    const memory = extendedExports.memory || env.memory; // prefer exported, otherwise try imported\n    throw Error(`abort: ${getString(memory, msg)} at ${getString(memory, file)}:${line}:${colm}`);\n  };\n  env.trace = env.trace || function trace(msg, n, ...args) {\n    const memory = extendedExports.memory || env.memory;\n    console.log(`trace: ${getString(memory, msg)}${n ? \" \" : \"\"}${args.slice(0, n).join(\", \")}`);\n  };\n  env.seed = env.seed || Date.now;\n  imports.Math = imports.Math || Math;\n  imports.Date = imports.Date || Date;\n\n  return extendedExports;\n}\n\n/** Prepares the final module once instantiation is complete. */\nfunction postInstantiate(extendedExports, instance) {\n  const exports = instance.exports;\n  const memory = exports.memory;\n  const table = exports.table;\n  const __new = exports.__new || F_NO_EXPORT_RUNTIME;\n  const __pin = exports.__pin || F_NO_EXPORT_RUNTIME;\n  const __unpin = exports.__unpin || F_NO_EXPORT_RUNTIME;\n  const __collect = exports.__collect || F_NO_EXPORT_RUNTIME;\n  const __rtti_base = exports.__rtti_base;\n  const getRttiCount = __rtti_base ? arr => arr[__rtti_base >>> 2] : F_NO_EXPORT_RUNTIME;\n\n  extendedExports.__new = __new;\n  extendedExports.__pin = __pin;\n  extendedExports.__unpin = __unpin;\n  extendedExports.__collect = __collect;\n\n  /** Gets the runtime type info for the given id. */\n  function getRttInfo(id) {\n    const U32 = new Uint32Array(memory.buffer);\n    if ((id >>>= 0) >= getRttiCount(U32)) throw Error(`invalid id: ${id}`);\n    return U32[(__rtti_base + 4 >>> 2) + (id << 1)];\n  }\n\n  /** Gets the runtime base id for the given id. */\n  function getRttBase(id) {\n    const U32 = new Uint32Array(memory.buffer);\n    if ((id >>>= 0) >= getRttiCount(U32)) throw Error(`invalid id: ${id}`);\n    return U32[(__rtti_base + 4 >>> 2) + (id << 1) + 1];\n  }\n\n  /** Gets and validate runtime type info for the given id for array like objects */\n  function getArrayInfo(id) {\n    const info = getRttInfo(id);\n    if (!(info & (ARRAYBUFFERVIEW | ARRAY | STATICARRAY))) throw Error(`not an array: ${id}, flags=${info}`);\n    return info;\n  }\n\n  /** Gets the runtime alignment of a collection's values. */\n  function getValueAlign(info) {\n    return 31 - Math.clz32((info >>> VAL_ALIGN_OFFSET) & 31); // -1 if none\n  }\n\n  /** Gets the runtime alignment of a collection's keys. */\n  // function getKeyAlign(info) {\n  //   return 31 - Math.clz32((info >>> KEY_ALIGN_OFFSET) & 31); // -1 if none\n  // }\n\n  /** Allocates a new string in the module's memory and returns its pointer. */\n  function __newString(str) {\n    if (str == null) return 0;\n    const length = str.length;\n    const ptr = __new(length << 1, STRING_ID);\n    const U16 = new Uint16Array(memory.buffer);\n    for (var i = 0, p = ptr >>> 1; i < length; ++i) U16[p + i] = str.charCodeAt(i);\n    return ptr;\n  }\n\n  extendedExports.__newString = __newString;\n\n  /** Allocates a new ArrayBuffer in the module's memory and returns its pointer. */\n  function __newArrayBuffer(buf) {\n    if (buf == null) return 0;\n    const bufview = new Uint8Array(buf);\n    const ptr = __new(bufview.length, ARRAYBUFFER_ID);\n    const U8 = new Uint8Array(memory.buffer);\n    U8.set(bufview, ptr);\n    return ptr;\n  }\n\n  extendedExports.__newArrayBuffer = __newArrayBuffer;\n\n  /** Reads a string from the module's memory by its pointer. */\n  function __getString(ptr) {\n    if (!ptr) return null;\n    const buffer = memory.buffer;\n    const id = new Uint32Array(buffer)[ptr + ID_OFFSET >>> 2];\n    if (id !== STRING_ID) throw Error(`not a string: ${ptr}`);\n    return getStringImpl(buffer, ptr);\n  }\n\n  extendedExports.__getString = __getString;\n\n  /** Gets the view matching the specified alignment, signedness and floatness. */\n  function getView(alignLog2, signed, float) {\n    const buffer = memory.buffer;\n    if (float) {\n      switch (alignLog2) {\n        case 2: return new Float32Array(buffer);\n        case 3: return new Float64Array(buffer);\n      }\n    } else {\n      switch (alignLog2) {\n        case 0: return new (signed ? Int8Array : Uint8Array)(buffer);\n        case 1: return new (signed ? Int16Array : Uint16Array)(buffer);\n        case 2: return new (signed ? Int32Array : Uint32Array)(buffer);\n        case 3: return new (signed ? BigInt64Array : BigUint64Array)(buffer);\n      }\n    }\n    throw Error(`unsupported align: ${alignLog2}`);\n  }\n\n  /** Allocates a new array in the module's memory and returns its pointer. */\n  function __newArray(id, valuesOrCapacity = 0) {\n    const input = valuesOrCapacity;\n    const info = getArrayInfo(id);\n    const align = getValueAlign(info);\n    const isArrayLike = typeof input !== \"number\";\n    const length = isArrayLike ? input.length : input;\n    const buf = __new(length << align, info & STATICARRAY ? id : ARRAYBUFFER_ID);\n    let result;\n    if (info & STATICARRAY) {\n      result = buf;\n    } else {\n      __pin(buf);\n      const arr = __new(info & ARRAY ? ARRAY_SIZE : ARRAYBUFFERVIEW_SIZE, id);\n      __unpin(buf);\n      const U32 = new Uint32Array(memory.buffer);\n      U32[arr + ARRAYBUFFERVIEW_BUFFER_OFFSET >>> 2] = buf;\n      U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2] = buf;\n      U32[arr + ARRAYBUFFERVIEW_BYTELENGTH_OFFSET >>> 2] = length << align;\n      if (info & ARRAY) U32[arr + ARRAY_LENGTH_OFFSET >>> 2] = length;\n      result = arr;\n    }\n    if (isArrayLike) {\n      const view = getView(align, info & VAL_SIGNED, info & VAL_FLOAT);\n      const start = buf >>> align;\n      if (info & VAL_MANAGED) {\n        for (let i = 0; i < length; ++i) {\n          view[start + i] = input[i];\n        }\n      } else {\n        view.set(input, start);\n      }\n    }\n    return result;\n  }\n\n  extendedExports.__newArray = __newArray;\n\n  /** Gets a live view on an array's values in the module's memory. Infers the array type from RTTI. */\n  function __getArrayView(arr) {\n    const U32 = new Uint32Array(memory.buffer);\n    const id = U32[arr + ID_OFFSET >>> 2];\n    const info = getArrayInfo(id);\n    const align = getValueAlign(info);\n    let buf = info & STATICARRAY\n      ? arr\n      : U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\n    const length = info & ARRAY\n      ? U32[arr + ARRAY_LENGTH_OFFSET >>> 2]\n      : U32[buf + SIZE_OFFSET >>> 2] >>> align;\n    return getView(align, info & VAL_SIGNED, info & VAL_FLOAT).subarray(buf >>>= align, buf + length);\n  }\n\n  extendedExports.__getArrayView = __getArrayView;\n\n  /** Copies an array's values from the module's memory. Infers the array type from RTTI. */\n  function __getArray(arr) {\n    const input = __getArrayView(arr);\n    const len = input.length;\n    const out = new Array(len);\n    for (let i = 0; i < len; i++) out[i] = input[i];\n    return out;\n  }\n\n  extendedExports.__getArray = __getArray;\n\n  /** Copies an ArrayBuffer's value from the module's memory. */\n  function __getArrayBuffer(ptr) {\n    const buffer = memory.buffer;\n    const length = new Uint32Array(buffer)[ptr + SIZE_OFFSET >>> 2];\n    return buffer.slice(ptr, ptr + length);\n  }\n\n  extendedExports.__getArrayBuffer = __getArrayBuffer;\n\n  /** Gets a function from poiner which contain table's index. */\n  function __getFunction(ptr) {\n    if (!table) throw Error(E_NO_EXPORT_TABLE);\n    const index = new Uint32Array(memory.buffer)[ptr >>> 2];\n    return table.get(index);\n  }\n\n  extendedExports.__getFunction = __getFunction;\n\n  /** Copies a typed array's values from the module's memory. */\n  function getTypedArray(Type, alignLog2, ptr) {\n    return new Type(getTypedArrayView(Type, alignLog2, ptr));\n  }\n\n  /** Gets a live view on a typed array's values in the module's memory. */\n  function getTypedArrayView(Type, alignLog2, ptr) {\n    const buffer = memory.buffer;\n    const U32 = new Uint32Array(buffer);\n    return new Type(\n      buffer,\n      U32[ptr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2],\n      U32[ptr + ARRAYBUFFERVIEW_BYTELENGTH_OFFSET >>> 2] >>> alignLog2\n    );\n  }\n\n  /** Attach a set of get TypedArray and View functions to the exports. */\n  function attachTypedArrayFunctions(ctor, name, align) {\n    extendedExports[`__get${name}`] = getTypedArray.bind(null, ctor, align);\n    extendedExports[`__get${name}View`] = getTypedArrayView.bind(null, ctor, align);\n  }\n\n  [\n    Int8Array,\n    Uint8Array,\n    Uint8ClampedArray,\n    Int16Array,\n    Uint16Array,\n    Int32Array,\n    Uint32Array,\n    Float32Array,\n    Float64Array\n  ].forEach(ctor => {\n    attachTypedArrayFunctions(ctor, ctor.name, 31 - Math.clz32(ctor.BYTES_PER_ELEMENT));\n  });\n\n  if (BIGINT) {\n    [BigUint64Array, BigInt64Array].forEach(ctor => {\n      attachTypedArrayFunctions(ctor, ctor.name.slice(3), 3);\n    });\n  }\n\n  /** Tests whether an object is an instance of the class represented by the specified base id. */\n  function __instanceof(ptr, baseId) {\n    const U32 = new Uint32Array(memory.buffer);\n    let id = U32[ptr + ID_OFFSET >>> 2];\n    if (id <= getRttiCount(U32)) {\n      do {\n        if (id == baseId) return true;\n        id = getRttBase(id);\n      } while (id);\n    }\n    return false;\n  }\n\n  extendedExports.__instanceof = __instanceof;\n\n  // Pull basic exports to extendedExports so code in preInstantiate can use them\n  extendedExports.memory = extendedExports.memory || memory;\n  extendedExports.table  = extendedExports.table  || table;\n\n  // Demangle exports and provide the usual utility on the prototype\n  return demangle(exports, extendedExports);\n}\n\nfunction isResponse(src) {\n  return typeof Response !== \"undefined\" && src instanceof Response;\n}\n\nfunction isModule(src) {\n  return src instanceof WebAssembly.Module;\n}\n\n/** Asynchronously instantiates an AssemblyScript module from anything that can be instantiated. */\nexport async function instantiate(source, imports = {}) {\n  if (isResponse(source = await source)) return instantiateStreaming(source, imports);\n  const module = isModule(source) ? source : await WebAssembly.compile(source);\n  const extended = preInstantiate(imports);\n  const instance = await WebAssembly.instantiate(module, imports);\n  const exports = postInstantiate(extended, instance);\n  return { module, instance, exports };\n}\n\n/** Synchronously instantiates an AssemblyScript module from a WebAssembly.Module or binary buffer. */\nexport function instantiateSync(source, imports = {}) {\n  const module = isModule(source) ? source : new WebAssembly.Module(source);\n  const extended = preInstantiate(imports);\n  const instance = new WebAssembly.Instance(module, imports);\n  const exports = postInstantiate(extended, instance);\n  return { module, instance, exports };\n}\n\n/** Asynchronously instantiates an AssemblyScript module from a response, i.e. as obtained by `fetch`. */\nexport async function instantiateStreaming(source, imports = {}) {\n  if (!WebAssembly.instantiateStreaming) {\n    return instantiate(\n      isResponse(source = await source)\n        ? source.arrayBuffer()\n        : source,\n      imports\n    );\n  }\n  const extended = preInstantiate(imports);\n  const result = await WebAssembly.instantiateStreaming(source, imports);\n  const exports = postInstantiate(extended, result.instance);\n  return { ...result, exports };\n}\n\n/** Demangles an AssemblyScript module's exports to a friendly object structure. */\nexport function demangle(exports, extendedExports = {}) {\n  const setArgumentsLength = exports[\"__argumentsLength\"]\n    ? length => { exports[\"__argumentsLength\"].value = length; }\n    : exports[\"__setArgumentsLength\"] || exports[\"__setargc\"] || (() => { /* nop */ });\n  for (let internalName of Object.keys(exports)) {\n    const elem = exports[internalName];\n    let parts = internalName.split(\".\");\n    let curr = extendedExports;\n    while (parts.length > 1) {\n      let part = parts.shift();\n      if (!Object.hasOwn(curr, part)) curr[part] = {};\n      curr = curr[part];\n    }\n    let name = parts[0];\n    let hash = name.indexOf(\"#\");\n    if (hash >= 0) {\n      const className = name.substring(0, hash);\n      const classElem = curr[className];\n      if (typeof classElem === \"undefined\" || !classElem.prototype) {\n        const ctor = function(...args) {\n          return ctor.wrap(ctor.prototype.constructor(0, ...args));\n        };\n        ctor.prototype = {\n          valueOf() { return this[THIS]; }\n        };\n        ctor.wrap = function(thisValue) {\n          return Object.create(ctor.prototype, { [THIS]: { value: thisValue, writable: false } });\n        };\n        if (classElem) Object.getOwnPropertyNames(classElem).forEach(name =>\n          Object.defineProperty(ctor, name, Object.getOwnPropertyDescriptor(classElem, name))\n        );\n        curr[className] = ctor;\n      }\n      name = name.substring(hash + 1);\n      curr = curr[className].prototype;\n      if (/^(get|set):/.test(name)) {\n        if (!Object.hasOwn(curr, name = name.substring(4))) {\n          let getter = exports[internalName.replace(\"set:\", \"get:\")];\n          let setter = exports[internalName.replace(\"get:\", \"set:\")];\n          Object.defineProperty(curr, name, {\n            get() { return getter(this[THIS]); },\n            set(value) { setter(this[THIS], value); },\n            enumerable: true\n          });\n        }\n      } else {\n        if (name === 'constructor') {\n          (curr[name] = function(...args) {\n            setArgumentsLength(args.length);\n            return elem(...args);\n          }).original = elem;\n        } else { // instance method\n          (curr[name] = function(...args) { // !\n            setArgumentsLength(args.length);\n            return elem(this[THIS], ...args);\n          }).original = elem;\n        }\n      }\n    } else {\n      if (/^(get|set):/.test(name)) {\n        if (!Object.hasOwn(curr, name = name.substring(4))) {\n          Object.defineProperty(curr, name, {\n            get: exports[internalName.replace(\"set:\", \"get:\")],\n            set: exports[internalName.replace(\"get:\", \"set:\")],\n            enumerable: true\n          });\n        }\n      } else if (typeof elem === \"function\" && elem !== setArgumentsLength) {\n        (curr[name] = (...args) => {\n          setArgumentsLength(args.length);\n          return elem(...args);\n        }).original = elem;\n      } else {\n        curr[name] = elem;\n      }\n    }\n  }\n  return extendedExports;\n}\n\nexport default {\n  instantiate,\n  instantiateSync,\n  instantiateStreaming,\n  demangle\n};\n","import loader from \"@assemblyscript/loader\";\n\ninterface command {\n    action: string,\n    data: any\n}\n\nlet moduleExports;\n\nconst myself: Worker = self as any;\n\nmyself.onmessage = async (event) => {\n\n    const { action, data } = event.data as command;\n\n    switch (action) {\n\n        case \"loadWasm\":\n            const module = await loader.instantiate(data, {\n                env: {},\n                index: {\n                    print: console.log\n                }\n            });\n            moduleExports = module.exports;\n            myself.postMessage(null);\n        break;\n\n        case \"generate\":\n            const [width, height] = data as number[];\n            const pointer: number = moduleExports.generate(...data);\n            const imageDataArrayView: Uint8ClampedArray = moduleExports.__getUint8ClampedArrayView(pointer);\n            const imageDataArray = new Uint8ClampedArray(imageDataArrayView);\n            moduleExports.__collect();\n            myself.postMessage(imageDataArray);\n        break;\n\n        default:\n            console.error(\"Unknown action: \" + action);\n            myself.postMessage(null);\n        break;\n    }\n}\n"],"names":["F_NO_EXPORT_RUNTIME","Error","BIGINT","BigUint64Array","THIS","Symbol","utf16","TextDecoder","fatal","getStringImpl","buffer","ptr","len","Uint32Array","wtf16","Uint16Array","String","fromCharCode","decode","str","off","subarray","preInstantiate","imports","extendedExports","getString","memory","env","abort","msg","file","line","colm","trace","n","args","console","log","slice","join","seed","Date","now","Math","postInstantiate","instance","exports","table","__new","__pin","__unpin","__collect","__rtti_base","getRttiCount","arr","getRttBase","id","U32","getArrayInfo","info","getRttInfo","getValueAlign","clz32","getView","alignLog2","signed","float","Float32Array","Float64Array","Int8Array","Uint8Array","Int16Array","Int32Array","BigInt64Array","__getArrayView","align","buf","length","getTypedArray","Type","getTypedArrayView","attachTypedArrayFunctions","ctor","name","bind","__newString","U16","i","p","charCodeAt","__newArrayBuffer","bufview","set","__getString","__newArray","valuesOrCapacity","input","isArrayLike","result","view","start","__getArray","out","Array","__getArrayBuffer","__getFunction","index","get","Uint8ClampedArray","forEach","BYTES_PER_ELEMENT","__instanceof","baseId","demangle","isResponse","src","Response","isModule","WebAssembly","Module","async","instantiate","source","instantiateStreaming","module","compile","extended","arrayBuffer","setArgumentsLength","value","internalName","Object","keys","elem","parts","split","curr","part","shift","hasOwn","hash","indexOf","className","substring","classElem","prototype","wrap","constructor","[object Object]","this","thisValue","create","writable","getOwnPropertyNames","defineProperty","getOwnPropertyDescriptor","test","getter","replace","setter","enumerable","original","obj","prop","hasOwnProperty","call","loader","instantiateSync","Instance","moduleExports","myself","self","onmessage","event","action","data","print","postMessage","pointer","generate","imageDataArrayView","__getUint8ClampedArrayView","imageDataArray","error"],"mappings":"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"}